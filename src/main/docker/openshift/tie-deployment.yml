apiVersion: v1
kind: Template
metadata:
  name: tie-app-template
  annotations:
    description: This template defines objects that are required to spin up an tie service pod
    tags: tie, service
    openshift.io/display-name: tie-template
    openshift.io/long-description: This template provides objects that are required to spin up a tie service pod.
    openshift.io/provider-display-name: nikio.io
labels:
  app: tie-app
parameters:
  - name: APP_NAME
    value: tie
    description: Name of the application
    required: true
    displayName: Application Name
  - name: APP_PORT
    value: "8080"
    description: Port of the application
    required: true
    displayName: Application Port
  - name: DOCKER_IMAGE
    value: "registry.cloud.nikio.io/tie-dev/tie"
    description: URL to the docker registry to the application image 
    required: true
    displayName: Docker registry URL
  - name: SECRET_REF
    value: tie-ds-secret-ref
    description: Name of the DataSource Secret Reference
    required: true
    displayName: "Secret name with DB credentials"
    readOnly: true
  - name: REG_SECRET_REF
    value: reg-secret-ref
    description: Name of the Registry Secret Reference
    required: true
    displayName: "*** PLEASE DO NOT CHANGE THIS ***"
    readOnly: true
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APP_NAME}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
          pre:
            failurePolicy: ignore
            execNewPod:
              command:
                - "/bin/sh"
                - "-c"
                - |
                    while true
                    do
                      rt=$(nc -z -w 1 ${APP_NAME}-mysqldb 80)
                      if [ $? -eq 0 ]; then
                        echo "DB is UP"
                        break
                      fi
                      echo "DB is not yet reachable;sleep for 10s before retry"
                      sleep 10
                    done
              containerName: ${APP_NAME}
        resources:
      replicas: "1"
      template:
        metadata:
          labels:
            app: ${APP_NAME}
        spec:
          containers:
          - name: ${APP_NAME}
            image: ${DOCKER_IMAGE}
            imagePullPolicy: IfNotPresent
            env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod,swagger
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://${APP_NAME}-mysqldb/tie?useUnicode=true&characterEncoding=utf8&useSSL=false
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-user
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-password
            ports:
            - name: http
              containerPort: "${APP_PORT}"
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 2
            ports:
              - containerPort: 8080
                name: http
                protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 15
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 2
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{
          "name":"${APP_NAME}-mysqldb", "namespace": "", "kind": "Service"}]'
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      selector:
        app: ${APP_NAME}
      type: LoadBalancer
      ports:
      - name: http
        port: "${APP_PORT}"
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APP_NAME}
    spec:
      to:
        kind: Service
        name: ${APP_NAME}
        weight: "100"
      port:
        targetPort: "http"
      wildcardPolicy: None
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge