apiVersion: v1
kind: Template
metadata:
    name: tie-template
    annotations:
        description: Creates Task-it-Easy with MySQL
        tags: "tie"
        openshift.io/display-name: Task-it-Easy with MySQL
        openshift.io/long-description: "Creates Task-it-Easy with MySQL"
        openshift.io/provider-display-name: Nikio-OpenShift
labels:
    createdBy: Nikio
parameters:
    - name: APPLICATION_NAME
      value: tie
      description: Name of the application
      required: true
      displayName: Application Name
    - name: SECRET_REF
      value: tie-ds-secret-ref
      description: Name of the DataSource Secret Reference
      required: true
      displayName: "*** PLEASE DO NOT CHANGE THIS ***"
    - name: REG_SECRET_REF
      value: reg-secret-ref
      description: Name of the Registry Secret Reference
      required: true
      displayName: "*** PLEASE DO NOT CHANGE THIS ***"
    - name: APP_PORT
      value: "8080"
      description: Port of the application
      required: true
      displayName: Application Port

    - name: MYSQL_USER
      displayName: MySQL Connection Username
      description: Username for MySQL user that will be used for accessing the database.
      generate: expression
      from: user[A-Z0-9]{3}
      required: true
    - name: MYSQL_PASSWORD
      displayName: MySQL Connection Password
      description: Password for the MySQL connection user.
      generate: expression
      from: "[a-zA-Z0-9]{16}"
      required: true
    - name: MYSQL_ROOT_PASSWORD
      displayName: MySQL root user Password
      description: Password for the MySQL root user.
      generate: expression
      from: "[a-zA-Z0-9]{16}"
      required: true
    - name: DATABASE_NAME
      value: tie
      displayName: MySQL DB Name
      description: Name of the MySQL database accessed.
      required: true
    - name: VOLUME_CAPACITY
      displayName: Volume Capacity
      description: Volume space available for data, e.g. 512Mi, 2Gi.
      value: 1Gi
      required: true
objects:
    # App Setup
    - apiVersion: v1
      kind: DeploymentConfig
      metadata:
          name: ${APPLICATION_NAME}
      spec:
          strategy:
              type: Rolling
              rollingParams:
                  updatePeriodSeconds: 1
                  intervalSeconds: 1
                  timeoutSeconds: 600
                  maxUnavailable: 25%
                  maxSurge: 25%
                  pre:
                      failurePolicy: ignore
                      execNewPod:
                          command:
                              - "/bin/sh"
                              - "-c"
                              - |
                                  while true
                                  do
                                    rt=$(nc -z -w 1 ${APPLICATION_NAME}-mysqldb 80)
                                    if [ $? -eq 0 ]; then
                                      echo "DB is UP"
                                      break
                                    fi
                                    echo "DB is not yet reachable;sleep for 10s before retry"
                                    sleep 10
                                  done
                          containerName: ${APPLICATION_NAME}
              resources:
          replicas: "1"
          template:
              metadata:
                  labels:
                      app: ${APPLICATION_NAME}
              spec:
                  containers:
                      - name: ${APPLICATION_NAME}
                        image: registry.cloud.nikio.io/tie-dev/tie
                        imagePullPolicy: IfNotPresent
                        env:
                            - name: SPRING_PROFILES_ACTIVE
                              value: prod,swagger
                            - name: SPRING_DATASOURCE_URL
                              value: jdbc:mysql://${APPLICATION_NAME}-mysqldb/tie?useUnicode=true&characterEncoding=utf8&useSSL=false
                            - name: SPRING_DATASOURCE_USERNAME
                              valueFrom:
                                  secretKeyRef:
                                      name: ${SECRET_REF}
                                      key: database-user
                            - name: SPRING_DATASOURCE_PASSWORD
                              valueFrom:
                                  secretKeyRef:
                                      name: ${SECRET_REF}
                                      key: database-password
                        ports:
                            - name: http
                              containerPort: "${APP_PORT}"
    - apiVersion: v1
      kind: Service
      metadata:
          annotations:
              service.alpha.openshift.io/dependencies: '[{
            "name":"${APPLICATION_NAME}-mysqldb", "namespace": "", "kind": "Service"}]'
          labels:
              app: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
      spec:
          selector:
              app: ${APPLICATION_NAME}
          type: LoadBalancer
          ports:
              - name: http
                port: "${APP_PORT}"
    - apiVersion: v1
      kind: Route
      metadata:
          name: ${APPLICATION_NAME}
      spec:
          to:
              kind: Service
              name: ${APPLICATION_NAME}
              weight: "100"
          port:
              targetPort: "http"
          wildcardPolicy: None


    # Database Deployment
    - apiVersion: v1
      kind: Secret
      metadata:
          name: ${SECRET_REF}
      stringData:
          database-user: "${MYSQL_USER}"
          database-password: "${MYSQL_PASSWORD}"
          database-root-password: "${MYSQL_ROOT_PASSWORD}"
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
          name: ${APPLICATION_NAME}
      spec:
          accessModes:
              - ReadWriteOnce
          resources:
              requests:
                  storage: "${VOLUME_CAPACITY}"
    - apiVersion: v1
      kind: DeploymentConfig
      metadata:
          name: ${APPLICATION_NAME}
          labels:
              app: ${APPLICATION_NAME}
      spec:
          # This is to define the deployment strategy (either be Rolling or Recreate)
          #     strategy:
          #       type: Rolling
          #       rollingParams:
          #         updatePeriodSeconds: 1
          #         intervalSeconds: 1
          #         timeoutSeconds: 600
          #         maxUnavailable: 25%
          #         maxSurge: 25%
          #       resources:
          triggers:
              - type: ConfigChange
          replicas: 1
          selector:
              app: ${APPLICATION_NAME}
          template:
              metadata:
                  labels:
                      app: ${APPLICATION_NAME}
              spec:
                  volumes:
                      - name: ${APPLICATION_NAME}-data
                        persistentVolumeClaim:
                            claimName: ${APPLICATION_NAME}
                  containers:
                      - name: ${APPLICATION_NAME}
                        image: mysql:5.7.20
                        env:
                            #            - name: MYSQL_USER
                            #              value: root
                            #            - name: MYSQL_ALLOW_EMPTY_PASSWORD
                            #              value: 'yes'
                            - name: MYSQL_DATABASE
                              value: ${DATABASE_NAME}
                            - name: MYSQL_USER
                              valueFrom:
                                  secretKeyRef:
                                      name: ${SECRET_REF}
                                      key: database-user
                            - name: MYSQL_PASSWORD
                              valueFrom:
                                  secretKeyRef:
                                      name: ${SECRET_REF}
                                      key: database-password
                            - name: MYSQL_ROOT_PASSWORD
                              valueFrom:
                                  secretKeyRef:
                                      name: ${SECRET_REF}
                                      key: database-root-password
                            #        command:
                            #        - mysqld
                            #        - --lower_case_table_names=1
                            #        - --skip-ssl
                            #        - --character_set_server=utf8mb4
                            #        - --explicit_defaults_for_timestamp
                        ports:
                            - containerPort: 3306
                              protocol: TCP
                        readinessProbe:
                            timeoutSeconds: 1
                            initialDelaySeconds: 5
                            exec:
                                command:
                                    - "/bin/sh"
                                    - "-i"
                                    - "-c"
                                    - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                                        -e 'SELECT 1'
                        livenessProbe:
                            timeoutSeconds: 1
                            initialDelaySeconds: 30
                            tcpSocket:
                                port: 3306
                        volumeMounts:
                            - name: ${APPLICATION_NAME}-data
                              mountPath: /var/lib/mysql
                        resources:
                        imagePullPolicy: IfNotPresent
                  restartPolicy: Always
                  terminationGracePeriodSeconds: 30
    - apiVersion: v1
      kind: Service
      metadata:
          name: ${APPLICATION_NAME}
          labels:
              app: ${APPLICATION_NAME}
      spec:
          ports:
              - name: mysqldb-bc
                protocol: TCP
                port: 3306
                targetPort: 3306
              # No need to mention the port explicitly as each pod and service gets assigned with an IP, a service within a pod is accessible/routable at :80
              - name: mysqldb
                protocol: TCP
                port: 80
                targetPort: 3306
          selector:
              app: ${APPLICATION_NAME}
